name: Wheels

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: "Package to build (numpy, scipy)"
      repo:
        required: true
        type: string
        description: "Repo to build (numpy, scipy)"
      force-build:
        required: false
        type: boolean
        description: "Force build even if wheels exist"
      version:
        required: false
        type: string
        description: "Version to build (default: latest release)"

jobs:
  meta:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ env.VERSION }}
      matrix: ${{ env.MATRIX }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.6.x
          enable-cache: true
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Fetch package version
        run: |
          if [[ -z "${{ inputs.version }}" ]]; then
            VERSION="$(uv run tools/fetch_matrix ${{ inputs.name }})"
          else
            VERSION="${{ inputs.version }}"
          fi
          echo "VERSION=${VERSION}" >>$GITHUB_ENV

      - name: Fetch build matrix
        run: |
          ${{ inputs.force-build }} && extra_args="--force-build"
          MATRIX="$(uv run tools/fetch_matrix ${{ inputs.name }} ${extra_args} \
            --store build.json --runs-on ubuntu-22.04 --runs-on windows-2019)"
          echo "MATRIX=${MATRIX}" >>$GITHUB_ENV
          echo "${MATRIX}" | yq -P -o yaml

      - name: Fetch other platforms from PyPI
        run: |
          uv run tools/fetch_unsupported ${{ inputs.name }} \
            --store build.json --version ${{ env.VERSION }} --output pypi.json
        if: ${{ env.matrix != 'null' }}

      - name: Upload other platforms
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}-pypi
          path: |
            pypi.json
          retention-days: 1
        if: ${{ env.matrix != 'null' }}

  build:
    if: ${{ needs.meta.outputs.matrix != 'null' }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.meta.outputs.matrix) }}

    name: ${{ inputs.name }}-${{ matrix.python }} (${{ matrix.runs-on }})

    needs: meta

    runs-on: ${{ matrix.runs-on }}

    continue-on-error: true

    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check out src
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: v${{ needs.meta.outputs.version }}
          path: src
          submodules: recursive

      - name: Prepare environment
        run: |
          echo "UV_PYTHON=${{ matrix.python }}" >>$GITHUB_ENV
          echo "UV_PYTHON_PREFERENCE=only-managed" >>$GITHUB_ENV

          case "${{ runner.os }}" in
            Linux) echo "venv_bin=bin" >>$GITHUB_ENV ;;
            Windows) echo "venv_bin=Scripts" >>$GITHUB_ENV ;;
          esac

          # Move src to avoid pyproject conflicts. SRC_DIR is set relative to GITHUB_WORKSPACE to
          # preserve the "D:\" prefix on Windows. (Pure Linux paths aren't supported as arguments
          # to 'working-directory'.)
          mv src ../../ && echo "SRC_DIR=${{ github.workspace }}/../../src" >>$GITHUB_ENV

          # Keep MKL directory short as it ends up in the final build.
          echo "MKL_DIR=$(realpath "${{ github.workspace }}"/../../mkl)" >>$GITHUB_ENV

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.6.x
          enable-cache: false

      - name: Install MKL libraries
        run: |
          uv venv "${{ env.MKL_DIR }}"
          source "${{ env.MKL_DIR }}/${{ env.venv_bin }}"/activate
          uv pip install mkl-devel

          # Get MKL version.
          echo "MKL_VERSION=$(uv pip show mkl | grep '^Version' | sed 's/Version: //')" \
              >>$GITHUB_ENV

          # Get pkg-config path.
          echo "PKG_CONFIG_PATH=$(python tools/get_file_in_pkg mkl-sdl.pc \
              --pkg mkl-devel --parent)" >>$GITHUB_ENV

          # Fetch MKL license.
          cat "$(python tools/get_file_in_pkg LICENSE.txt --pkg mkl-devel)" \
              >>"${{ github.workspace }}/patches/LICENSE_MKL.txt"

          # Add .so -> .so.2 symlinks to fix linking for mkl-service.
          cd "${{ env.MKL_DIR }}"/lib
          for i in $( ls libmkl*.so.2 ); do ln -s $i ${i%.*}; done

      - name: Add MKL to runtime dependencies
        working-directory: ${{ env.SRC_DIR }}
        run: |
          # Pin runtime library to the exact version used for compiling.
          if [[ "${{ inputs.name }}" == "mkl-service" ]]; then
            sed -i "s/install_requires=\[\]/install_requires=['mkl==${MKL_VERSION}']/" setup.py
          else
            uv add --no-sync mkl=="${MKL_VERSION}" mkl-service
          fi

      - name: Add MKL licence
        working-directory: ${{ env.SRC_DIR }}
        run: |
          echo "" >>LICENSE.txt
          echo "----" >>LICENSE.txt
          echo "" >>LICENSE.txt
          cat LICENSES_bundled.txt >>LICENSE.txt
          cat "${{ github.workspace }}/patches/LICENSE_MKL.txt" >>LICENSE.txt
        if: inputs.name != 'mkl-service'

      - name: Apply patches
        run: |
          # Apply patches.
          cd "${{ env.SRC_DIR }}"
          git apply "${{ github.workspace }}"/patches/${{ inputs.name }}/*.patch

          # Fix MKL pkg-config on Windows.
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "${{ github.workspace }}"/patches/mkl/*.pc "${PKG_CONFIG_PATH}/"
          fi

      - name: Install Windows build dependencies
        run: |
          # Use fall-through operator ';&' to match all cases.
          case "${{ inputs.name }}" in
            numpy | scipy)
              # Pkg-config is required for numpy and scipy.
              choco install -y --no-progress --stoponfirstfailure \
                  --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite
              ;&
            scipy)
              # Gcc is required for scipy.
              choco install rtools -y --no-progress --force --version=4.0.0.20220206
              echo "c:\rtools40\ucrt64\bin;" >>$GITHUB_PATH
              ;&
          esac
        if: runner.os == 'windows'

      - name: Build wheel
        working-directory: ${{ env.SRC_DIR }}
        run: |
          case "${{ inputs.name }}" in
            numpy)
              args="-Csetup-args=-Dblas=mkl-sdl \
                    -Csetup-args=-Dlapack=mkl-sdl \
                    -Csetup-args=-Dallow-noblas=false \
                    -Csetup-args=-Dcpu-baseline=F16C \
                    -Csetup-args=-Dcpu-dispatch=AVX512_ICL"
              [[ "${{ runner.os }}" == "Windows" ]] && args="${args} -Csetup-args=--vsenv"
              ;;

            scipy)
              # MSVC is unable to compile Pythran, use gcc or set -Duse-pythran=false.
              args="-Csetup-args=-Dblas=mkl-sdl \
                    -Csetup-args=-Dlapack=mkl-sdl \
                    -Csetup-args=-Duse-g77-abi=true"
              ;;

            'mkl-service')
              case "${{ runner.os }}" in
                Linux) export MKLROOT="${{ env.MKL_DIR }}" ;;
                Windows) export MKLROOT="${{ env.MKL_DIR }}"/Library ;;
              esac
              export CFLAGS="${CFLAGS} -fno-fast-math"
              args="--no-build-isolation"
              uv venv buildenv && source buildenv/"${{ env.venv_bin }}"/activate
              uv pip install setuptools cython
              ;;
          esac
          uv build --wheel --index https://urob.github.io/numpy-mkl ${args}

      - name: Repair wheel (Linux)
        run: |
          mkdir -p wheelhouse
          plat="$(ldd --version | head -1 | awk '{ print $NF }' | tr '.' '_')_$(uname -m)"
          uvx auditwheel repair "${{ env.SRC_DIR }}"/dist/*.whl -w wheelhouse \
              --exclude 'libmkl*' --plat=manylinux_${plat}

          # Set runpath to location of MKL libraries.
          if [[ "${{ inputs.name }}" == "mkl-service" ]]; then
            uvx wheel unpack wheelhouse/mkl_service*.whl --dest tmp
            cd tmp/mkl_service*/mkl
            uvx patchelf --set-rpath '$ORIGIN/../../..:$ORIGIN/../..' _mklinit.*.so
            uvx patchelf --set-rpath '$ORIGIN/../../..:$ORIGIN/../..' _py_mkl_service.*.so
            cd ../../..
            uvx wheel pack tmp/mkl_service*/ --dest wheelhouse
          fi
        if: runner.os == 'linux'

      - name: Repair wheel (Windows)
        run: |
          mkdir -p wheelhouse
          uvx delvewheel repair "${{ env.SRC_DIR }}"/dist/*.whl -w wheelhouse \
              --exclude mkl_rt.2.dll --exclude libsf_error_state.dll
        if: runner.os == 'windows'

      - name: Run tests
        run: |
          # Make sure we don't pick up the development MKL libraries.
          rm -rf "${{ env.MKL_DIR }}"

          # Set up test environment.
          uv venv testenv && source testenv/"${{ env.venv_bin }}"/activate
          uv pip install wheelhouse/*.whl --index https://urob.github.io/numpy-mkl

          case "${{ inputs.name }}" in
            numpy)
              uv pip install -r "${{ env.SRC_DIR }}"/requirements/test_requirements.txt
              uv pip install threadpoolctl
              python tools/numpy_tests.py
              ;;

            scipy)
              uv pip install -r "${{ env.SRC_DIR }}"/requirements/test.txt \
                  --index https://urob.github.io/numpy-mkl
              python -c 'import sys; import scipy; sys.exit(not scipy.test())'
              ;;

            mkl-service)
              uv pip install pytest
              pytest -vv --pyargs mkl
              ;;
          esac

      - name: Store build information
        run: |
          mkdir -p wheelhouse
          cat >wheelhouse/versions-${{ matrix.python}}-${{ runner.os }}.json <<EOF
          {
            "name": "${{ inputs.name }}",
            "version": "${{ needs.meta.outputs.version }}",
            "python": "${{ matrix.python }}",
            "os": "${{ runner.os }}",
            "mkl": "${{ env.MKL_VERSION }}"
          }
          EOF

      - name: Archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.name }}-${{ matrix.python }}-${{ runner.os }}
          path: |
            wheelhouse/*.whl
            wheelhouse/*.json
          retention-days: 1

  commit:
    if: ${{ needs.meta.outputs.matrix != 'null' }}

    needs: [meta, build]

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          # Explicitly set ref to include commits from the meta job.
          # https://github.com/actions/checkout/issues/439#issuecomment-830862188
          ref: main
          path: main

      - uses: actions/checkout@v4
        with:
          ref: wheelhouse
          path: wheelhouse

      - name: Create directory
        run: |
          mkdir -p wheelhouse/${{ inputs.name }}

      - uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.name }}-*
          path: wheelhouse/${{ inputs.name }}
          merge-multiple: true

      - name: Update index
        run: |
          main/tools/make_index wheelhouse/${{ inputs.name}}/ --package ${{ inputs.name }} \
            --extra-pypi-wheels wheelhouse/${{ inputs.name}}/pypi.json

          # Remove the pypi.json file so it's not picked up by store_info below.
          rm wheelhouse/${{ inputs.name }}/pypi.json

      - name: Update build data
        run: |
          main/tools/store_info.py wheelhouse/${{ inputs.name }}/*.json --store main/build.json

          # Remove json files so they don't get committed.
          rm wheelhouse/${{ inputs.name }}/*.json

      - name: Commit wheels
        working-directory: wheelhouse
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
              echo "No changes to commit"
              exit 0
          fi
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "ci: Add wheels for ${{ inputs.name }}-${{ needs.meta.outputs.version }}"
          git push origin HEAD:wheelhouse

      - name: Commit build data
        working-directory: main
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
              echo "No changes to commit"
              exit 0
          fi
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add build.json
          git commit -m "ci: Store info for ${{ inputs.name }}-${{ needs.meta.outputs.version }}"
          git push origin HEAD:main

...
# vim: set tw=98:
