name: Wheels

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: "Package to build (numpy, scipy)"
      repo:
        required: true
        type: string
        description: "Repo to build (numpy, scipy)"
      force-build:
        required: false
        type: boolean
        description: "Force build even if wheels exist"
      manylinux:
        required: false
        type: boolean
        description: "Build Linux wheels in manylinux container"
      version:
        required: false
        type: string
        description: "Version to build (default: latest release)"

jobs:
  meta:
    if: github.repository == 'urob/numpy-mkl'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Set up python
        uses: astral-sh/setup-uv@2ddd2b9cb38ad8efd50337e8ab201519a34c9f24 # v7.1.1
        with:
          version-file: "pyproject.toml"

      - name: Fetch build matrix
        run: |
          uv run tools/fetch_matrix2 ${{ inputs.name }} --config ci-targets.yaml \
            --store build.json ${{ inputs.force-build && '--force-build' || '' }} >matrix.json

          echo "tag=$(jq -c '."tag"' matrix.json)" >>$GITHUB_OUTPUT
          echo "version=$(jq -c '."version"' matrix.json)" >>$GITHUB_OUTPUT
          echo "matrix=$(jq -c '."matrix"' matrix.json)" >>$GITHUB_OUTPUT

          cat matrix.json | yq -P -o yaml

  #-----------------------------------------------------------------------------------------------
  build:
    name: ${{ inputs.name }}-${{ matrix.python_version }} (${{ matrix.runner }})
    needs: meta
    if: ${{ needs.meta.outputs.matrix }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    strategy:
      matrix: ${{ fromJson(needs.meta.outputs.matrix) }}
      fail-fast: false
    continue-on-error: true
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Check out src
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ needs.meta.outputs.tag }}
          path: src
          submodules: recursive
          persist-credentials: false

      - name: Prepare environment
        run: |
          # Need this since pyproject.toml doesn't apply to $SRC_DIR.
          echo "UV_PYTHON_PREFERENCE=only-managed" >>$GITHUB_ENV

          case "${{ runner.os }}" in
            Linux) echo "venv_bin=bin" >>$GITHUB_ENV ;;
            Windows) echo "venv_bin=Scripts" >>$GITHUB_ENV ;;
          esac

          # Move src to avoid pyproject conflicts. SRC_DIR is set relative to GITHUB_WORKSPACE to
          # preserve the "D:\" prefix on Windows. (Pure Linux paths aren't supported as arguments
          # to 'working-directory'.)
          mv src ../../ && echo "SRC_DIR=${GITHUB_WORKSPACE}/../../src" >>$GITHUB_ENV

          # Keep MKL directory short as it ends up in the final build.
          echo "MKL_DIR=$(realpath "${GITHUB_WORKSPACE}"/../../mkl)" >>$GITHUB_ENV

      - name: Set up python
        uses: astral-sh/setup-uv@2ddd2b9cb38ad8efd50337e8ab201519a34c9f24 # v7.1.1
        with:
          python-version: ${{ matrix.python_version }}
          version-file: "pyproject.toml"
          enable-cache: false

      - name: Install MKL libraries
        run: |
          uv venv "${{ env.MKL_DIR }}"
          source "${{ env.MKL_DIR }}/${{ env.venv_bin }}"/activate
          uv pip install mkl-devel

          # Get MKL version.
          echo "MKL_VERSION=$(uv pip show mkl | grep '^Version' | sed 's/Version: //')" \
              >>$GITHUB_ENV

          # Get pkg-config path.
          echo "PKG_CONFIG_PATH=$(python tools/get_file_in_pkg mkl-sdl.pc \
              --pkg mkl-devel --parent)" >>$GITHUB_ENV

          # Fetch MKL license.
          cat "$(python tools/get_file_in_pkg LICENSE.txt --pkg mkl-devel)" \
              >>"${GITHUB_WORKSPACE}/patches/LICENSE_MKL.txt"

          # Add .so -> .so.2 symlinks to fix linking for mkl-service.
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cd "${{ env.MKL_DIR }}"/lib
            for i in $( ls libmkl*.so.2 ); do ln -s $i ${i%.*}; done
          fi

      - name: Apply patches
        run: |
          # Apply patches.
          cd "${{ env.SRC_DIR }}"
          git apply "${GITHUB_WORKSPACE}"/patches/${{ inputs.name }}/*.patch

          # Fix MKL pkg-config on Windows.
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "${GITHUB_WORKSPACE}"/patches/mkl/*.pc "${PKG_CONFIG_PATH}/"
          fi

      - name: Add MKL to runtime dependencies
        working-directory: ${{ env.SRC_DIR }}
        run: |
          # Pin runtime library to the exact version used for compiling.
          if [[ "${{ inputs.name }}" == "mkl-service" ]]; then
            # MKLROOT must be set, even with --no-sync.
            MKLROOT="${{ env.MKL_DIR }}" uv add --no-sync mkl>="${{ env.MKL_VERSION }}"
          else
            uv add --no-sync mkl>="${{ env.MKL_VERSION }}" mkl-service
          fi

      - name: Add MKL licence
        working-directory: ${{ env.SRC_DIR }}
        run: |
          echo "" >>LICENSE.txt
          echo "----" >>LICENSE.txt
          echo "" >>LICENSE.txt
          cat LICENSES_bundled.txt >>LICENSE.txt
          cat "${GITHUB_WORKSPACE}/patches/LICENSE_MKL.txt" >>LICENSE.txt
        if: inputs.name != 'mkl-service'

      - name: Install Windows build dependencies
        run: |
          # Use fall-through operator ';&' to match all cases.
          case "${{ inputs.name }}" in
            numpy | scipy)
              # Pkg-config is required for numpy and scipy.
              choco install -y --no-progress --stoponfirstfailure \
                  --checksum 6004DF17818F5A6DBF19CB335CC92702 pkgconfiglite
              ;&
            scipy)
              # Gcc is required for scipy.
              choco install rtools -y --no-progress --force --version=4.0.0.20220206
              echo "c:\rtools40\ucrt64\bin;" >>$GITHUB_PATH
              ;&
          esac
        if: runner.os == 'windows'

      - name: Install manylinux build dependencies
        run: |
          case "${{ inputs.name }}" in
            mkl-service)
              dnf -y install clang
              ;&
            numpy)
              # Tests for distutil require clang (Python < 3.12).
              [[ "$UV_PYTHON" =~ ^(cp310|cp311)$ ]] && dnf -y install clang || true
              ;&
            # scipy)
            #   # Test dependency gmpy2 hasn't released pre-build wheels for py314, building
            #   # from scratch requires libmpc-devel.
            #   [[ "$UV_PYTHON" =~ ^(cp314)$ ]] && dnf -y install libmpc-devel || true
            #   ;&
          esac
        if: (runner.os == 'linux') && inputs.manylinux

      - name: Build wheel
        working-directory: ${{ env.SRC_DIR }}
        run: |
          case "${{ inputs.name }}" in
            numpy)
              args="-Csetup-args=-Dblas=mkl-sdl \
                    -Csetup-args=-Dlapack=mkl-sdl \
                    -Csetup-args=-Dallow-noblas=false \
                    -Csetup-args=-Dcpu-baseline=F16C \
                    -Csetup-args=-Dcpu-dispatch=AVX512_ICL"
              [[ "${{ runner.os }}" == "Windows" ]] && args="${args} -Csetup-args=--vsenv"
              ;;

            scipy)
              # MSVC is unable to compile Pythran, use gcc or set -Duse-pythran=false.
              args="-Csetup-args=-Dblas=mkl-sdl \
                    -Csetup-args=-Dlapack=mkl-sdl \
                    -Csetup-args=-Duse-g77-abi=true"
              ;;

            'mkl-service')
              case "${{ runner.os }}" in
                Linux) export MKLROOT="${{ env.MKL_DIR }}" ;;
                Windows) export MKLROOT="${{ env.MKL_DIR }}"/Library ;;
              esac
              export CFLAGS="${CFLAGS} -fno-fast-math"
              args="--no-build-isolation"
              uv venv buildenv && source buildenv/"${{ env.venv_bin }}"/activate
              uv pip install setuptools cython
              ;;
          esac
          uv build --wheel --index https://urob.github.io/numpy-mkl ${args}

      - name: Repair wheel (Linux)
        run: |
          mkdir -p wheelhouse
          plat="$(ldd --version | head -1 | awk '{ print $NF }' | tr '.' '_')_$(uname -m)"
          uvx auditwheel repair "${{ env.SRC_DIR }}"/dist/*.whl -w wheelhouse \
              --exclude 'libmkl*' --plat=manylinux_${plat}
        if: runner.os == 'linux'

      - name: Repair wheel (Windows)
        run: |
          mkdir -p wheelhouse
          uvx delvewheel repair "${{ env.SRC_DIR }}"/dist/*.whl -w wheelhouse \
              --exclude mkl_rt.2.dll --exclude libsf_error_state.dll
        if: runner.os == 'windows'

      - name: Run tests
        run: |
          # Make sure we don't pick up the development MKL libraries.
          rm -rf "${{ env.MKL_DIR }}"

          # Set up test environment.
          uv venv testenv && source testenv/"${{ env.venv_bin }}"/activate
          uv pip install wheelhouse/*.whl --index https://urob.github.io/numpy-mkl

          case "${{ inputs.name }}" in
            numpy)
              uv pip install -r "${{ env.SRC_DIR }}"/requirements/test_requirements.txt
              uv pip install threadpoolctl
              python tools/numpy_tests.py
              ;;

            scipy)
              # Only install essential test dependencies, mirroring official wheel builder.
              uv pip install pytest pytest-xdist threadpoolctl pooch hypothesis
              # uv pip install -r "${{ env.SRC_DIR }}"/requirements/test.txt \
              #     --index https://urob.github.io/numpy-mkl
              python -c 'import sys; import scipy; sys.exit(not scipy.test())'
              ;;

            mkl-service)
              uv pip install pytest
              pytest -s -v --pyargs mkl
              ;;
          esac

      - name: Store build information
        run: |
          cat >wheelhouse/versions-${{ matrix.python_version}}-${{ runner.os }}.json <<EOF
          {
            "name": "${{ inputs.name }}",
            "version": "${{ needs.meta.outputs.version }}",
            "python": "${{ matrix.python_version }}",
            "os": "${{ runner.os }}",
            "mkl": "${{ env.MKL_VERSION }}"
          }
          EOF

      - name: Archive
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: ${{ inputs.name }}-${{ matrix.python_version }}-${{ runner.os }}
          path: |
            wheelhouse/*.whl
            wheelhouse/*.json
          retention-days: 1

  #-----------------------------------------------------------------------------------------------
  release:
    needs: [meta, build]
    if: ${{ needs.meta.outputs.matrix != 'null' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout main branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Explicitly set ref to include commits from the meta job.
          # https://github.com/actions/checkout/issues/439#issuecomment-830862188
          ref: main
          persist-credentials: true  # Need credentials to push.

      - name: Checkout deployment branch
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: pypi
          path: pypi
          persist-credentials: true  # Need credentials to push.

      - name: Set up python
        uses: astral-sh/setup-uv@2ddd2b9cb38ad8efd50337e8ab201519a34c9f24 # v7.1.1
        with:
          version-file: "pyproject.toml"

      - name: Fetch wheels
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: ${{ inputs.name }}-*
          path: release
          merge-multiple: true

      - name: Bump project version
        run: |
          uv version --bump patch
          echo "VERSION=$(uv version --short)" >>$GITHUB_ENV

      - name: Store build metadata
        run: |
          tools/store_info.py release/*.json --store build.json

      - name: Update badges
        run: |
          tools/update_icons README.md --store build.json

      - name: Commit release data
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
              echo "No changes to commit"
              exit 0
          fi
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "ci: Prepare release for ${{ inputs.name }}-${{ needs.meta.outputs.version }}"
          git push origin HEAD:main

      - name: Write release notes
        run: |
          uv run tools/release_notes templates/release.md --store build.json >release/release.md

      - name: Release wheels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${VERSION}" --title "${VERSION}" --notes-file release/release.md release/*.whl

      - name: Generate index
        run: |
          # Wait 10s for release to get finished.
          sleep 10
          uv run tools/make_index2 pypi/${{ inputs.name}}/index.html

      - name: Deploy index
        working-directory: pypi
        run: |
          if [[ -z "$(git status --porcelain)" ]]; then
              echo "No changes to commit"
              exit 0
          fi
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add .
          git commit -m "ci: Add wheels for ${{ inputs.name }}-${{ needs.meta.outputs.version }}"
          git push origin HEAD:pypi

...
# vim: set tw=98:
