#!/usr/bin/env python

import argparse
import itertools
import json
import re
import tomllib

import requests
from packaging.specifiers import SpecifierSet
from packaging.version import InvalidVersion, Version
from store_info import Build, fetch_store

REQUESTS_TIMEOUT = 45

PYPY = 'https://pypi.org/pypi/{package}/json'
GH_RELEASES = 'https://api.github.com/repos/{repo}/releases'
GH_PYPROJECT = 'https://raw.githubusercontent.com/{repo}/refs/tags/{tag}/pyproject.toml'

# List of maintained Python releases. Update this once a year when a new
# release is available (usually early October).
PYTHON_VERSIONS = ('3.10', '3.11', '3.12', '3.13', '3.14')


class FetchPackageData:
    def __init__(self, package_name, github=False):
        self.package_name = package_name
        self.github = github

        if github:
            repo = self.get_github_repo()
            self.package_data = self.get_package_data_github(repo)
        else:
            self.package_data = self.get_package_data_pypi()

    def get_github_repo(self):
        urls = self.get_package_data_pypi()['project_urls']
        pattern = '.*github.com/([^/]+/[^/]+)($|/.*)'
        for url in urls.values():
            if m := re.match(pattern, url):
                return m.group(1)
        raise FetchPackageDataError('Could not detect Github repo')

    def get_package_data_pypi(self):
        url = PYPY.format(package=self.package_name)
        return self.fetch_dict(url)['info']

    def get_package_data_github(self, repo):
        url = GH_RELEASES.format(repo=repo)
        releases = self.fetch_dict(url)
        for r in releases:
            tag = r['tag_name']
            try:
                version = Version(tag).base_version
            except InvalidVersion:
                continue
            if Version(tag).__str__() != version or r['draft'] or r['prerelease']:
                continue
            url = GH_PYPROJECT.format(repo=repo, tag=tag)
            info = self.fetch_dict(url, toml=True)['project']
            return {
                'github_tag': tag,
                'requires_python': info['requires-python'],
                'version': version,
            }
        raise FetchPackageDataError('No public release found')

    def get_package_version(self):
        return self.package_data['version']

    def get_python_versions(self):
        requires_python = self.package_data['requires_python']
        supported_versions = SpecifierSet(requires_python).filter(PYTHON_VERSIONS)
        return ['cp' + v.replace('.', '') for v in supported_versions]

    def get_github_tag(self):
        if self.github:
            return self.package_data['github_tag']
        raise ValueError('Cannot fetch Github tag from PyPI')

    @staticmethod
    def fetch_dict(url, toml=False):
        response = requests.get(url, timeout=REQUESTS_TIMEOUT)
        if (rc := response.status_code) != 200:  # noqa: PLR2004
            raise FetchPackageDataError(f'Download failed with status code {rc}')
        return tomllib.loads(response.text) if toml else response.json()


class FetchBuildMatrix:
    def __init__(self, package_name, store, runs_on, force_build=False, github=False):
        package_data = FetchPackageData(package_name, github=github)
        self.package_name = package_name
        self.package_version = package_data.get_package_version()
        self.python_versions = package_data.get_python_versions()
        self.mkl_version = FetchPackageData('mkl').get_package_version()
        self.store = store
        self.runs_on = runs_on
        self.force_build = force_build

    def get_os(self, run):
        if run.startswith('ubuntu'):
            return 'linux'
        if run.startswith('windows'):
            return 'windows'
        raise ValueError(f'Unknown OS {run}')

    def exclude(self, python_version, runs_on):
        info = {
            'name': self.package_name,
            'version': self.package_version,
            'python': python_version,
            'os': self.get_os(runs_on),
            'mkl': self.mkl_version,
        }
        return Build(info).exclude(fetch_store(self.store))

    def get_matrix(self):
        matrix = {
            'runs-on': self.runs_on,
            'python': self.python_versions,
            'exclude': [],
        }
        should_run = False
        for os, py in itertools.product(self.runs_on, self.python_versions):
            if not self.force_build and self.exclude(py, os):
                matrix['exclude'].append(
                    {
                        'runs-on': os,
                        'python': py,
                    }
                )
            else:
                should_run = True
        return json.dumps(matrix) if should_run else 'null'


class FetchPackageDataError(Exception):
    pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Fetch GHA build matrix')
    parser.add_argument('name', type=str, help='package name')
    parser.add_argument('-s', '--store', type=str, help='path to build store')
    parser.add_argument(
        '-r', '--runs-on', action='append', type=str, help='operating systems to run on'
    )
    parser.add_argument('-f', '--force-build', action='store_true', help='force build')
    parser.add_argument('--github', action='store_true', help='fetch from Github')
    parser.add_argument('--tag', action='store_true', help='fetch Github tag')

    args = parser.parse_args()

    if args.runs_on:
        fetcher = FetchBuildMatrix(
            args.name,
            args.store,
            args.runs_on,
            force_build=args.force_build,
            github=args.github,
        )
        print(fetcher.get_matrix())

    elif args.tag:
        fetcher = FetchPackageData(args.name, github=True)
        print(fetcher.get_github_tag())

    else:
        fetcher = FetchPackageData(args.name, github=args.github)
        print(fetcher.get_package_version())
