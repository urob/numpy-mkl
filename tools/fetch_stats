#!/usr/bin/env python

import requests

REQUESTS_TIMEOUT = 45

PACKAGES = ('numpy', 'scipy', 'mkl-service')


class Wheel:
    def __init__(self, asset):
        package, version, py_version, _, platform = asset['name'].split('-')
        os = 'windows' if platform.startswith('win') else 'linux'
        self.id = (package, os, version, py_version)
        self.downloads = asset['download_count']


class Assets:
    def __init__(self):
        self.url = 'https://api.github.com/repos/urob/numpy-mkl/releases'

    def fetch_releases(self):
        response = requests.get(self.url, timeout=REQUESTS_TIMEOUT)
        if (rc := response.status_code) != 200:  # noqa: PLR2004
            raise FetchReleaseDataError(f'Download failed with status code {rc}')
        return response.json()

    def fetch_stats(self):
        stats = {}
        for release in self.fetch_releases():
            wheels = (Wheel(a) for a in release['assets'])
            for wheel in wheels:
                stats[wheel.id] = wheel.downloads + stats.get(wheel.id, 0)
        return dict(sorted(stats.items()))


class FetchReleaseDataError(Exception):
    pass


if __name__ == '__main__':
    stats = Assets().fetch_stats()
    python_versions = sorted({_[3] for _ in stats})
    n = len(python_versions)
    table = {}
    for s, d in stats.items():
        id_, python_version = s[:-1], s[-1]
        if id_ not in table:
            table[id_] = [0] * n
        table[id_][python_versions.index(python_version)] += d

    top = '┌' + '─' * 32 + '┬' + '─' * (5 * n + 2) + '┬' + '─' * 7 + '┐'
    med = '├' + '─' * 32 + '┼' + '─' * (5 * n + 2) + '┼' + '─' * 7 + '┤'
    bot = '└' + '─' * 32 + '┴' + '─' * (5 * n + 2) + '┴' + '─' * 7 + '┘'
    scheme = '│  {:<11}  {:<7}  {:<6}  │' + '  {:>3}' * n + '  │  {:>3}  │'
    print(top)
    print(
        scheme.format('Package', 'OS', 'Ver.', *[_[2:] for _ in python_versions], 'all')
    )
    s_ = None
    for s, d in table.items():
        if s_ != s[0]:
            print(med)
        s_ = s[0]
        if sum(d) > 0:
            print(scheme.format(*s, *[_ or '' for _ in d], sum(d)))
    print(bot)
    print(f'total: {sum(stats.values())}')
