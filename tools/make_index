#!/usr/bin/env python

import argparse
import hashlib
import re
import time
from pathlib import Path

TEMPLATE = """<!DOCTYPE html>
<html>
  <head>
    <title>Links for %NAME%</title>
  </head>
  <body>
    <h1>Links for %NAME%</h1>
    <pre>
%LINKS%
    </pre>
  </body>
</html>
"""

PACKAGE_URL = (
    '<a href="{baseurl}{name}#sha256={sha256}" download="{name}">{name}</a>'
    '{pad}   {size}   {timestamp}'
)


class Wheel:
    def __init__(self, path):
        self.path = path
        self.name = path.name

        self.sha256 = self.sha256sum()
        self.size = self.size()
        self.timestamp = self.timestamp()

    def __str__(self):
        return PACKAGE_URL.format(
            baseurl='',
            name=self.name,
            sha256=self.sha256,
            size=self.size,
            timestamp=self.timestamp,
            pad=' ' * (width - len(self.name)),
        )

    def sha256sum(self):
        with self.path.open('rb', buffering=0) as f:
            return hashlib.file_digest(f, 'sha256').hexdigest()

    def size(self):
        mb = self.path.stat().st_size / 1024**2
        return f'{mb:4,.1f} MB'

    def timestamp(self):
        if self.name in old_wheels and self.sha256 == old_wheels[self.name]['sha256']:
            print(f'No change in {self.name}, applying old timestamp')
            return old_wheels[self.name]['timestamp']

        return time.strftime(
            '%d-%b-%Y',
            time.gmtime(self.path.stat().st_mtime),
        )


class ParseIndex:
    def __init__(self, path):
        self.wheels = dict(self.parse(path))

    def parse(self, path):
        # Remove duplicate {name} groups from PACKAGE_URL and convert to regex string.
        pattern = re.sub(r'{name}', r'.*?', PACKAGE_URL, count=2)
        regex = re.sub(r'{(.+?)}', r'(?P<\1>.*)', pattern)

        lines = path.read_text().splitlines() if path.exists() else []
        for line in lines:
          if m := re.match(regex, line):
                yield m['name'], m.groupdict()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create a custom Python package index')

    parser.add_argument('wheelhouse', type=str, help='path where wheels are stored')
    parser.add_argument('-p', '--package', type=str, help='name of the package')

    args = parser.parse_args()
    wheelhouse = Path(args.wheelhouse).resolve()
    indexfile = wheelhouse / 'index.html'
    package = args.package if args.package else wheelhouse.name

    wheels = sorted(
        [p for p in wheelhouse.iterdir() if p.suffix in {'.whl', '.tar.gz'}]
    )
    names = [w.name for w in wheels]
    width = len(max(names, key=len))  # Global: used in Wheel.__str__.

    old_wheels = ParseIndex(indexfile).wheels  # Global: used in Wheel.timestamp.

    index = TEMPLATE.replace('%LINKS%', '\n'.join(str(Wheel(w)) for w in wheels))
    index = index.replace('%NAME%', package)
    indexfile.write_text(index)
